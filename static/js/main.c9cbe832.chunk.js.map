{"version":3,"sources":["pages/Login.js","actions/index.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["Login","handleClick","props","history","getEmail","push","state","enableButton","email","checkPassword","password","length","test","setState","disabled","handleChange","target","name","value","this","type","data-testid","onChange","onClick","Component","connect","dispatch","addUser","Table","expenses","map","tableHeader","key","expense","description","tag","method","id","number","Number","exchangeRates","currency","ask","toFixed","split","wallet","Wallet","getExpenses","totalValue","initialState","forEach","getCurrencies","userEmail","currencies","htmlFor","currencie","React","user","a","fetch","response","json","data","result","Object","keys","filter","fetchExpensesAPI","App","path","component","exact","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9cbe832.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addUser } from '../actions/index';\n\n// emailRegex: https://www.w3schools.com/jsref/jsref_regexp_test.asp\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      disabled: true,\n    };\n  }\n\n  handleClick = () => {\n    const { history, getEmail } = this.props;\n    history.push('/carteira');\n    getEmail(this.state);\n  }\n\n  enableButton = () => {\n    const { email, password } = this.state;\n    const number = 5;\n    const checkPassword = password.length > number;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    const checkedEmail = emailRegex.test(email);\n    if (checkedEmail && checkPassword) {\n      this.setState({ disabled: false });\n    } else {\n      this.setState({ disabled: true });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    }, () => {\n      this.enableButton();\n    });\n  }\n\n  render() {\n    const { disabled, password, email } = this.state;\n    return (\n      <>\n        <input\n          type=\"email\"\n          name=\"email\"\n          data-testid=\"email-input\"\n          value={ email }\n          onChange={ this.handleChange }\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={ password }\n          data-testid=\"password-input\"\n          onChange={ this.handleChange }\n        />\n        <button\n          type=\"button\"\n          disabled={ disabled }\n          onClick={ this.handleClick }\n        >\n          Entrar\n        </button>\n      </>\n    );\n  }\n}\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  getEmail: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getEmail: (state) => dispatch(addUser(state)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","export const ADD_USER = 'ADD_USER';\nexport const GET_CURRENCIES = 'GET_CURRENCIES';\nexport const GET_EXPENSES = 'GET_EXPENSES';\nexport const GET_CAMBIO = 'GET_CAMBIO';\n\nexport const addUser = (state) => ({\n  type: ADD_USER, state,\n});\n\nexport const fetchCurrencies = (state) => ({\n  type: GET_CURRENCIES, state,\n});\n\nexport const fetchExpenses = (expenses) => ({\n  type: GET_EXPENSES, expenses,\n});\n\nexport const fetchCambio = (state) => ({\n  type: GET_CAMBIO, state,\n});\n\nexport const fetchCurrenciesAPI = () => async (dispatch) => {\n  // Fiz o código da linha 12 com referência ao do João Kruschewsky: https://github.com/tryber/sd-019-b-project-trybewallet/pull/108/commits/9da1cea6d07593a7bf213b7a6ee4f4bf6330b363\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  const result = Object.keys(data).filter((key) => key !== 'USDT');\n  dispatch(fetchCurrencies(result));\n};\n\nexport const fetchExpensesAPI = (state) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const data = await response.json();\n  state.exchangeRates = data;\n  dispatch(fetchExpenses(state));\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nclass Table extends Component {\n  render() {\n    const tableHeaders = ['Descrição', 'Tag', 'Método de pagamento',\n      'Valor', 'Moeda', 'Câmbio utilizado', 'Valor convertido',\n      'Moeda de conversão', 'Editar/Excluir'];\n    const { expenses } = this.props;\n    return (\n      <table>\n        <tr>\n          {tableHeaders.map((tableHeader) => (\n            <th key={ tableHeader }>{ tableHeader }</th>\n          ))}\n        </tr>\n        {expenses.map((expense) => {\n          const { description, tag, method, value, id } = expense;\n          const number = Number(expense.value)\n          * Number(expense.exchangeRates[expense.currency].ask);\n          return (\n            <tr key={ id }>\n              <td>{ description }</td>\n              <td>{ tag }</td>\n              <td>{ method }</td>\n              <td>{ Number(value).toFixed(2) }</td>\n              {/* Usei para o split https://github.com/tryber/sd-019-b-project-trybewallet/pull/85/commits/8761387cdb8ee06b0e7664765701d07f09925c89 */}\n              <td>{ expense.exchangeRates[expense.currency].name.split('/')[0] }</td>\n              <td>{Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}</td>\n              <td>{ number.toFixed(2) }</td>\n              <td>Real</td>\n            </tr>\n          );\n        })}\n      </table>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(String).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(Table);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchCurrenciesAPI, fetchExpensesAPI } from '../actions';\nimport Table from '../components/Table';\n\nconst ALIMENTAÇÃO = 'Alimentação';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: ALIMENTAÇÃO,\n    };\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  handleChange = ({ target: { id, value } }) => {\n    this.setState({\n      [id]: value,\n    });\n  }\n\n  handleClick = () => {\n    const { id } = this.state;\n    const { getExpenses } = this.props;\n    getExpenses(this.state);\n    this.setState({\n      id: id + 1,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: ALIMENTAÇÃO,\n    });\n  }\n\n  totalValue = () => {\n    const { expenses } = this.props;\n    let initialState = 0;\n    expenses.forEach((expense) => {\n      initialState += Number(expense.value)\n      * Number(expense.exchangeRates[expense.currency].ask);\n      return initialState;\n    });\n    return initialState.toFixed(2);\n  }\n\n  render() {\n    const { userEmail, currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    const totalValue = this.totalValue();\n    return (\n      <>\n        <div>\n          User\n          {' '}\n          <h2 data-testid=\"email-field\">\n            { userEmail }\n          </h2>\n        </div>\n        <div>\n          <p data-testid=\"total-field\">{ totalValue }</p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n        <div>\n          <label htmlFor=\"value\">\n            Valor\n            <input\n              type=\"text\"\n              id=\"value\"\n              value={ value }\n              data-testid=\"value-input\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"description\">\n            Descrição\n            <input\n              type=\"text\"\n              id=\"description\"\n              value={ description }\n              data-testid=\"description-input\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"currency\">\n            Moeda\n            <select\n              value={ currency }\n              id=\"currency\"\n              onChange={ this.handleChange }\n            >\n              {\n                currencies.map((currencie) => (\n                  <option value={ currencie } key={ currencie }>{ currencie }</option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Método de pagamento\n            <select\n              id=\"method\"\n              value={ method }\n              data-testid=\"method-input\"\n              onChange={ this.handleChange }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Categoria\n            <select\n              id=\"tag\"\n              value={ tag }\n              data-testid=\"tag-input\"\n              onChange={ this.handleChange }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n          <button\n            type=\"submit\"\n            onClick={ this.handleClick }\n          >\n            Adicionar despesa\n          </button>\n        </div>\n        <div>\n          <Table />\n        </div>\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  getCurrencies: PropTypes.func.isRequired,\n  getExpenses: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(String).isRequired,\n  expenses: PropTypes.arrayOf(String).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(fetchCurrenciesAPI()),\n  getExpenses: (state) => dispatch(fetchExpensesAPI(state)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route exact path=\"/\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_USER } from '../actions';\n\nconst INITIAL_STATE = {\n\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case ADD_USER:\n    return {\n      ...state, email: action.state.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { GET_CURRENCIES, GET_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.state,\n    };\n  case GET_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.expenses],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <HashRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}